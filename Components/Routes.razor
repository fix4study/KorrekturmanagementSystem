@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using System.Reflection
@inject NavigationManager Navigation

<CascadingAuthenticationState>
    <Router AppAssembly="typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeView>
                <Authorized>
                    @if (IsAccessAllowed(routeData.PageType))
                    {
                        <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
                    }
                    else
                    {
                        <LayoutView Layout="typeof(Layout.MainLayout)">
                            <p>Zugriff verweigert: Keine ausreichenden Rechte.</p>
                        </LayoutView>
                    }
                </Authorized>
                <NotAuthorized>
                    @if (IsAnonymousAllowed(routeData.PageType))
                    {
                        <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
                    }
                    else
                    {
                        @RedirectToLogin()
                    }
                </NotAuthorized>
            </AuthorizeView>
        </Found>
        <NotFound>
            <LayoutView Layout="typeof(Layout.MainLayout)">
                <p>Seite nicht gefunden.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private bool IsAnonymousAllowed(Type pageType)
    {
        return pageType.GetCustomAttribute<AllowAnonymousAttribute>() != null;
    }

    private bool IsAccessAllowed(Type pageType)
    {
        var authorizeAttr = pageType.GetCustomAttribute<AuthorizeAttribute>();
        if (authorizeAttr == null || string.IsNullOrEmpty(authorizeAttr.Roles))
        {
            return true;
        }

        var user = AuthenticationStateTask?.Result?.User;
        return user != null && 
            user.Identity?.IsAuthenticated == true && 
            authorizeAttr.Roles.Split(',').Any(role => user.IsInRole(role.Trim()));
    }

    private RenderFragment RedirectToLogin() => builder =>
    {
        Navigation.NavigateTo("/account/login", true);
    };
}
