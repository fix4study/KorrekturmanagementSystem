@page "/Meldungen"
@using Korrekturmanagementsystem.Dtos
@using Korrekturmanagementsystem.Dtos.Report
@using Korrekturmanagementsystem.Models
@using Korrekturmanagementsystem.Services.Interfaces
@inject IReportProvider ReportService
@rendermode InteractiveServer

<NavLink class="btn btn-success mb-3 float-end" href="/meldungen/neu">
    + Neue Meldung
</NavLink>

<h3 class="mb-4">Meldungen</h3>

<div class="report-list space-y-2">
    @if (AllReports != null && AllReports.Any())
    {

        <ReportFilter Filter="Filter" Statuses="DistinctStatuses" Priorities="DistinctPriorities" />

        @foreach (var report in CurrentPageReports)
        {
            <div class="card border shadow-sm mb-2">
                <div class="card-body p-2">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-1 h6">@report.Title</h5>
                        <em>Erstellt am: @report.CreatedAt.ToShortDateString()</em>
                    </div>
                    <div class="d-flex justify-content-between text-muted small">
                        <div>
                            <strong>Status:</strong> @report.StatusName |
                            <strong>Prio:</strong> @report.PriorityName
                        </div>
                        <em>Aktualisiert am: @report.UpdatedAt.ToShortDateString()</em>
                    </div>
                    <div class="mt-2 text-end">
                        <a class="btn btn-sm btn-primary" href="@($"/meldungen/details/{report.Id}")">Details</a>
                    </div>
                </div>
            </div>
        }

        <Pagination TotalPages="@TotalPages" CurrentPage="@CurrentPage" OnPageChange="SetPage" />
    }
    else
    {
        <p>Derzeit gibt es keine Meldungen</p>
    }
</div>

@code {
    private List<ReportOverviewDto> AllReports { get; set; } = new();
    private ReportFilterModel Filter { get; set; } = new();
    private List<ReportOverviewDto> FilteredReports => Filter.Apply(AllReports);

    private IEnumerable<string> DistinctStatuses => AllReports
        .Select(r => r.StatusName)
        .Distinct()
        .OrderBy(s => s);

    private IEnumerable<string> DistinctPriorities => AllReports
        .Select(r => r.PriorityName)
        .Distinct()
        .OrderBy(s => s);


    private int PageSize = 5;
    private int CurrentPage = 1;
    private int TotalPages => (int)Math.Ceiling((double)FilteredReports.Count / PageSize);

    private IEnumerable<ReportOverviewDto> CurrentPageReports =>
        FilteredReports.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    private void SetPage(int page)
    {
        if (page >= 1 && page <= TotalPages)
        {
            CurrentPage = page;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AllReports = (await ReportService.GetReportsOverviewAsync()).ToList();
        Filter.OnChanged = () => { CurrentPage = 1; StateHasChanged(); };
    }

}
