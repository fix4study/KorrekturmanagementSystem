@page "/Meldungen"
@using Korrekturmanagementsystem.Dtos
@using Korrekturmanagementsystem.Dtos.Report
@using Korrekturmanagementsystem.Models
@using Korrekturmanagementsystem.Models.Enums
@using Korrekturmanagementsystem.Services.Interfaces
@inject IReportProvider ReportService
@rendermode InteractiveServer

<NavLink class="btn btn-success mb-3 float-end" href="/meldungen/neu">
    + Neue Meldung
</NavLink>

<h3 class="mb-4">Meldungen</h3>

<div class="report-list space-y-2">
    @if (AllReports != null && AllReports.Any())
    {

        <ReportFilter Filter="Filter" Statuses="DistinctStatuses" Priorities="DistinctPriorities" />

        <Sorting CurrentSortField="Sorting.CurrentSortField"
                 SortDescending="Sorting.SortDescending"
                 OnSortChanged="Sorting.SetSort" />

        @foreach (var report in CurrentPageReports)
        {
            <ReportCard Report="report" />
        }

        <Pagination TotalPages="@Paging.TotalPages" CurrentPage="@Paging.CurrentPage" OnPageChange="Paging.SetPage" />
    }
    else
    {
        <p>Derzeit gibt es keine Meldungen</p>
    }
</div>

@code {
    private List<ReportOverviewDto> AllReports { get; set; } = new();
    private ReportFilterModel Filter { get; set; } = new();
    private ReportSortingModel Sorting { get; set; } = new();
    private List<ReportOverviewDto> FilteredReports => Filter.Apply(AllReports);
    private PagingModel Paging { get; set; } = new();

    private IEnumerable<string> DistinctStatuses => AllReports
        .Select(r => r.StatusName)
        .Distinct()
        .OrderBy(s => s);

    private IEnumerable<string> DistinctPriorities => AllReports
        .Select(r => r.PriorityName)
        .Distinct()
        .OrderBy(s => s);

    private IEnumerable<ReportOverviewDto> CurrentPageReports =>
        Paging.Paginate(Sorting.SortedReports(FilteredReports));

    protected override async Task OnInitializedAsync()
    {
        AllReports = (await ReportService.GetReportsOverviewAsync()).ToList();
        Filter.OnChanged = () => { Paging.CurrentPage = 1; StateHasChanged(); };
    }
}
