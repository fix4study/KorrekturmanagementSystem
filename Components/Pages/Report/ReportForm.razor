@using Korrekturmanagementsystem.Components.Pages.Report.FormParts
@using Korrekturmanagementsystem.Dtos
@using Korrekturmanagementsystem.Dtos.Report
@using Korrekturmanagementsystem.Models
@using Korrekturmanagementsystem.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="Model.Report" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="row g-4">
        <!-- Linke Spalte -->
        <div class="col-md-8">

            <Details Options="Model.Options"
                     Report="Model.Report"
                     HasEditPermission="HasEditPermission" />

            @if (IsEdit)
            {
                <Attachments AttachmentList="Model.Attachments"
                             ShowAttachments="ShowAttachments"
                             OnToggleAttachments="OnToggleAttachments"
                             OnImageLoaded="OnImageLoaded" />
            }
        </div>

        <!-- Rechte Spalte -->
        <div class="col-md-4">
            <MetaData Model="Model"
                      IsEdit="IsEdit"
                      HasEditPermission="HasEditPermission"
                      SelectedTagsChanged="SelectedTagsChanged" />

            @if (HasEditPermission)
            {
                <div style="position:fixed; bottom:20px; right:20px; z-index:1050;" class="shadow">
                    <button type="submit" class="btn btn-primary btn-lg">@(IsEdit ? "Speichern" : "Hinzufügen")</button>
                </div>
            }

            @if (!string.IsNullOrEmpty(ShowMessage))
            {
                <div class="alert alert-info mt-3">@ShowMessage</div>
            }
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public ReportModel Model { get; set; } = default!;
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public string ShowMessage { get; set; } = string.Empty;
    [Parameter] public bool ShowAttachments { get; set; }
    [Parameter] public EventCallback OnToggleAttachments { get; set; }
    [Parameter] public EventCallback<string> OnImageLoaded { get; set; }
    [Parameter] public bool IsEdit { get; set; } = false;
    [Parameter] public EventCallback<List<TagDto>> SelectedTagsChanged { get; set; }
    [Parameter] public bool HasEditPermission { get; set; }
}
