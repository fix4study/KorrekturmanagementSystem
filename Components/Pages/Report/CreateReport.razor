@page "/meldungen/neu"
@using System.Text
@using Korrekturmanagementsystem.Components.Shared
@using Korrekturmanagementsystem.Dtos
@using Korrekturmanagementsystem.Dtos.Report
@using Korrekturmanagementsystem.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@inject IReportService ReportService
@inject IFileUploadService FileUploadService
@inject IAttachmentService AttachmentService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (OptionsDto != null)
{
    <h3 class="mb-4">Meldung hinzufügen</h3>

    <ReportForm Model="@Model"
                Options="@OptionsDto"
                IsEdit="false"
                ShowMessage="@message"
                OnValidSubmit="HandleValidSubmit" />

    <AuthorizeView Roles="Admin">
        <InputFile OnChange="HandleFileChange" multiple />
        <ul>
            @foreach (var file in selectedFiles)
            {
                <li>@file.Name (@(file.Size / 1024) KB)</li>
            }
        </ul>
    </AuthorizeView>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info mt-3">@message</div>
    }
}

@code {
    public AddReportDto Model { get; set; } = new();
    public ReportFormOptionsDto OptionsDto { get; set; } = default!;
    private List<IBrowserFile> selectedFiles = new();
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        OptionsDto = await ReportService.GetFormOptionsAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (!httpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false)
        {
            message = "Sie sind nicht berechtigt, eine Meldung zu erstellen.";
            return;
        }

        var reportId = await ReportService.AddReportAsync(Model);

        if (reportId is null)
        {
            message = "Fehler beim Erstellen der Meldung.";
            return;
        }

        var sb = new StringBuilder("Meldung erfolgreich gespeichert.");

        if (selectedFiles?.Count > 0)
        {
            var result = await FileUploadService.UploadAsync(reportId.Value, selectedFiles);

            if (result.IsSuccess)
            {
                sb.Append(" Dateien erfolgreich hochgeladen.");
            }
            else
            {
                sb.Append(result.ErrorMessage ?? "Unbekannter Fehler.");
            }
        }

        message = sb.ToString();
        await Task.Delay(1500);
        Navigation.NavigateTo("/meldungen");
    }

    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
    }
}
