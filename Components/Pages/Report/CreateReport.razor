@page "/meldungen/neu"
@using System.Text
@using Korrekturmanagementsystem.Components.Pages.Report.FormParts
@using Korrekturmanagementsystem.Dtos
@using Korrekturmanagementsystem.Dtos.Report
@using Korrekturmanagementsystem.Models
@using Korrekturmanagementsystem.Models.Enums
@using Korrekturmanagementsystem.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@inject IReportService ReportService
@inject IReportOptionsService ReportOptionsService
@inject NavigationManager Navigation

@if (_model.Options != null)
{
    <h3 class="mb-4">Meldung hinzuf√ºgen</h3>

    <Notification Visible="@(!string.IsNullOrEmpty(_message))"
                         OnClose="@(() => _message = "")"
                         Message="@_message"
                         Type="_notificationType" />

    <ReportForm Model="@_model"
                IsEdit="false"
                HasEditPermission="true"
                OnValidSubmit="HandleValidSubmit"
                SelectedTagsChanged="HandleSelectedTagsChanged" />

    <FileUploadPanel OnFilesChanged="files => _selectedFiles = files.ToList()"
                     HasEditPermission="true" />
}

@code {
    public ReportModel _model { get; set; } = new();
    private List<IBrowserFile> _selectedFiles = new();
    private List<TagDto> _selectedTags = new();
    private string _message = "";
    private NotificationType _notificationType = NotificationType.Success;


    protected override async Task OnInitializedAsync()
    {
        var options = await ReportOptionsService.GetFormOptionsAsync();
        _model.Options = options;
    }

    private async Task HandleValidSubmit()
    {
        var result = await ReportService.AddReportAsync(_model, _selectedTags, _selectedFiles);
        
        if (result.IsSuccess)
        {
            Navigation.NavigateTo($"/meldungen/details/{result.Data}?msg={Uri.EscapeDataString(result.Message!)}");
            return;
        }

        _notificationType = NotificationType.Error;
        _message = result.Message ?? "Unbekannter Fehler.";
    }

    private Task HandleSelectedTagsChanged(List<TagDto> tags)
    {
        _selectedTags = tags;
        return Task.CompletedTask;
    }
}
