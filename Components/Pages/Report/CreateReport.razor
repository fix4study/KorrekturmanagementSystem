@page "/meldungen/neu"
@using Korrekturmanagementsystem.Components.Shared
@using Korrekturmanagementsystem.Dtos
@using Korrekturmanagementsystem.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@inject IReportService ReportService
@inject IFileUploadService FileUploadService
@inject IAttachmentService AttachmentService
@inject IHttpContextAccessor httpContextAccessor
@rendermode InteractiveServer

@if (OptionsDto != null)
{
    <h3 class="mb-4">Meldung hinzufügen</h3>

    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="CreateReportForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Titel</label>
            <InputText class="form-control" @bind-Value="Model.Title" />
        </div>

        <div class="mb-3">
            <label class="form-label">Beschreibung</label>
            <InputTextArea class="form-control" @bind-Value="Model.Description" />
        </div>

        <div class="mb-3">
            <label class="form-label">Meldungstyp</label>
            <InputSelect class="form-select" @bind-Value="Model.ReportTypeId">
                <option disabled value="">-- Bitte wählen --</option>
                @foreach (var type in OptionsDto.ReportTypes)
                {
                    <option value="@type.Id">@type.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Priorität</label>
            <InputSelect class="form-select" @bind-Value="Model.PriorityId">
                <option disabled value="">-- Bitte wählen --</option>
                @foreach (var priority in OptionsDto.Priorities)
                {
                    <option value="@priority.Id">@priority.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Materialtyp</label>
            <InputSelect class="form-select" @bind-Value="Model.MaterialTypeId">
                <option disabled value="">-- Bitte wählen --</option>
                @foreach (var type in OptionsDto.MaterialTypes)
                {
                    <option value="@type.Id">@type.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Kurs (optional)</label>
            <InputSelect class="form-select" @bind-Value="Model.CourseId">
                <option value="">-- Kein Kurs --</option>
                @foreach (var course in OptionsDto.Courses)
                {
                    <option value="@course.Id">@course.Name (@course.Code)</option>
                }
            </InputSelect>
        </div>

        <AuthorizeView Context="fileUpload "Roles="Admin">
            <InputFile OnChange="HandleFileChange" multiple />
            <ul>
                @foreach (var file in selectedFiles)
                {
                    <li>@file.Name (@(file.Size / 1024) KB)</li>
                }
            </ul>
        </AuthorizeView>

        <SubmitIfAuthorized Label="Hinzufügen" MessageIfUnauthorized="Bitte melden Sie sich an, um eine Meldung anzulegen." />

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-info mt-3">@message</div>
        }
    </EditForm>
}

@code {
    public AddReportDto Model { get; set; } = new();
    public ReportFormOptionsDto OptionsDto { get; set; } = default!;
    private List<IBrowserFile> selectedFiles = new();
    private string message = "";


    protected override async Task OnInitializedAsync()
    {
        OptionsDto = await ReportService.GetFormOptionsAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (!httpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated ?? false)
        {
            message = "Sie sind nicht berechtigt, eine Meldung zu erstellen.";
            return;
        }

        var reportId = await ReportService.AddReportAsync(Model);

        if (reportId is null)
        {
            message = "Fehler beim Erstellen der Meldung.";
            return;
        }

        var validReportId = reportId.Value;

        foreach (var file in selectedFiles)
        {
            try
            {
                using var stream = file.OpenReadStream();
                var blobUrl = await FileUploadService.UploadAsync(file.Name, stream);

                var attachment = new CreateAttachmentDto
                    {
                        ReportId = validReportId,
                        FileName = file.Name,
                        FileUrl = blobUrl,
                        UploadedAt = DateTime.UtcNow
                    };

                await AttachmentService.CreateAsync(attachment);
            }
            catch (Exception ex)
            {
                message = $"Fehler beim Hochladen von {file.Name}: {ex.Message}";
            }
        }

        message = "Meldung und Dateien wurden erfolgreich gespeichert.";
    }


    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
    }
}
