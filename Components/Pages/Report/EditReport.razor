@page "/Meldungen/Details/{Id:guid}"
@using Korrekturmanagementsystem.Dtos
@using Korrekturmanagementsystem.Dtos.Report
@using Korrekturmanagementsystem.Models
@using Korrekturmanagementsystem.Services.Interfaces
@using System.Text
@inject IReportService ReportService
@inject IAuthorizationService AuthorizationService
@rendermode InteractiveServer

@if (_viewModel != null)
{
    <h3 class="mb-4">Meldung bearbeiten</h3>

    <ReportForm Model="@_viewModel"
    IsEdit="true"
    HasEditPermission="_hasEditPermission"
    ShowAttachments="@_showAttachments"
    OnToggleAttachments="ToggleAttachmentVisibility"
    OnImageLoaded="OnImageLoaded"
    ShowMessage="@_message"
    OnValidSubmit="HandleValidSubmit"
    SelectedTagsChanged="HandleSelectedTagsChanged" />


    <FileUploadPanel OnFilesChanged="files => selectedFiles = files.ToList()" HasEditPermission="_hasEditPermission" />

    if (_viewModel.Report.Id != Guid.Empty)
    {
        <div class="mb-4">
            <CommentSection ReportId="_viewModel.Report.Id" />
        </div>
    }

    <div class="mb-4">
        <ReportHistory HistoryEntries="_viewModel.ReportHistory" />
    </div>
}

@code {
    private ReportModel _viewModel = new();
    private bool _showAttachments = false;
    private HashSet<string> _loadedImages = new();
    private string _message = "";
    private List<IBrowserFile> selectedFiles = new();
    private bool _hasEditPermission;


    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _hasEditPermission = await AuthorizationService.HasEditReportPermissonAsync(Id);
        _viewModel = await ReportService.BuildEditReportViewModelAsync(Id);
    }

    private async Task HandleValidSubmit()
    {
        if (!_hasEditPermission)
        {
            _message = "Sie sind nicht zum Bearbeiten der Meldung berechtigt!";
            return;
        }

        var result = await ReportService.UpdateReportAsync(_viewModel, selectedFiles);

        _message = result.Message ?? "Unbekannter Fehler.";

        if (result.IsSuccess)
        {
            _viewModel = await ReportService.BuildEditReportViewModelAsync(Id);
        }
    }

    private void OnImageLoaded(string fileName)
    {
        _loadedImages.Add(fileName);
        StateHasChanged();
    }

    private void ToggleAttachmentVisibility()
    {
        _showAttachments = !_showAttachments;
    }

    private Task HandleSelectedTagsChanged(List<TagDto> tags)
    {
        _viewModel.SelectedTags = tags;
        return Task.CompletedTask;
    }
}
