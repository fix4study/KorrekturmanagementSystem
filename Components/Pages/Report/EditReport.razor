@page "/Meldungen/Details/{Id:guid}"
@using Korrekturmanagementsystem.Components.Shared
@using Korrekturmanagementsystem.Dtos
@using Korrekturmanagementsystem.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@inject IReportService ReportService
@inject IAttachmentService AttachmentService
@rendermode InteractiveServer

@if (OptionsDto != null)
{
    <h3 class="mb-4">Meldung bearbeiten</h3>

    <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" FormName="EditReportForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Titel</label>
            <InputText class="form-control" @bind-Value="Model.Title" />
        </div>

        <div class="mb-3">
            <label class="form-label">Beschreibung</label>
            <InputTextArea class="form-control" @bind-Value="Model.Description" />
        </div>

        <div class="mb-3">
            <label class="form-label">Meldungstyp</label>
            <InputSelect class="form-select" @bind-Value="Model.ReportTypeId">
                <option disabled value="">-- Bitte wählen --</option>
                @foreach (var type in OptionsDto.ReportTypes)
                {
                    <option value="@type.Id">@type.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Priorität</label>
            <InputSelect class="form-select" @bind-Value="Model.PriorityId">
                <option disabled value="">-- Bitte wählen --</option>
                @foreach (var priority in OptionsDto.Priorities)
                {
                    <option value="@priority.Id">@priority.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Materialtyp</label>
            <InputSelect class="form-select" @bind-Value="Model.MaterialTypeId">
                <option disabled value="">-- Bitte wählen --</option>
                @foreach (var type in OptionsDto.MaterialTypes)
                {
                    <option value="@type.Id">@type.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Kurs (optional)</label>
            <InputSelect class="form-select" @bind-Value="Model.CourseId">
                <option value="">-- Kein Kurs --</option>
                @foreach (var course in OptionsDto.Courses)
                {
                    <option value="@course.Id">@course.Name (@course.Code)</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Status</label>
            <InputSelect class="form-select" @bind-Value="Model.StatusId">
                <option value="">-- Kein Status --</option>
                @foreach (var status in OptionsDto.Statuses)
                {
                    <option value="@status.Id">@status.Name</option>
                }
            </InputSelect>
        </div>

        <button class="btn btn-outline-primary mb-2" @onclick="ToggleAttachmentVisibility">
            @((showAttachments ? "Anhänge ausblenden" : "Anhänge anzeigen"))
        </button>

        @if (showAttachments && Attachments != null && Attachments.Any())
        {
            <h5>Anhänge:</h5>
            <ul>
                @foreach (var attachment in Attachments)
                {
                    <li>
                        @if (attachment.FileName.EndsWith(".png") || attachment.FileName.EndsWith(".jpg"))
                        {
                            <div style="position: relative;">
                                @if (!loadedImages.Contains(attachment.FileName))
                                {
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Lade...</span>
                                    </div>
                                }

                                <img src="@FileUploadService.GenerateReadSasUrl(attachment.FileName, TimeSpan.FromHours(1))"
                                     style="max-width: 200px; display:@(loadedImages.Contains(attachment.FileName) ? "block" : "none")"
                                     onload="@(() => OnImageLoaded(attachment.FileName))" />
                            </div>
                        }
                        else
                        {
                            <a href="@FileUploadService.GenerateReadSasUrl(attachment.FileName, TimeSpan.FromHours(1))" target="_blank">
                                @attachment.FileName
                            </a>
                        }
                    </li>
                }

            </ul>
        }
        else
        {
            <p>Keine Dateien vorhanden.</p>
        }


        <SubmitIfAuthorized />
    </EditForm>
}

@code {

    private UpdateReportDto Model { get; set; } = new();
    private ReportDetailsDto reportDetails { get; set; } = default!;
    private ReportFormOptionsDto OptionsDto { get; set; } = default!;
    private List<AttachmentDto> Attachments { get; set; } = new(); 
    private bool showAttachments = false;
    private HashSet<string> loadedImages = new();

    [Inject]
    private IFileUploadService FileUploadService { get; set; } = default!;

    [Parameter]
    public Guid Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        OptionsDto = await ReportService.GetFormOptionsAsync();
        reportDetails = await ReportService.GetReportDetailsByIdAsync(Id);
        Attachments = (await AttachmentService.GetByReportIdAsync(Id)).ToList();

        Model = new UpdateReportDto
            {
                Id = Id,
                Title = reportDetails.Title,
                Description = reportDetails.Description,
                ReportTypeId = reportDetails.ReportType.Id,
                PriorityId = reportDetails.Priority.Id,
                MaterialTypeId = reportDetails.MaterialType.Id,
                CourseId = reportDetails.Course?.Id,
                StatusId = reportDetails.Status.Id
            };
    }

    private async Task HandleValidSubmit()
    {
        await ReportService.UpdateReportByIdAsync(Model);
    }

    private void OnImageLoaded(string fileName)
    {
        loadedImages.Add(fileName);
        StateHasChanged();
    }
    
    private void ToggleAttachmentVisibility()
    {
        showAttachments = !showAttachments;
    }
}
