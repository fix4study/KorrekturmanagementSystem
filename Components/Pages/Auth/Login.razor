@page "/account/login"
@using Korrekturmanagementsystem.Models
@using Korrekturmanagementsystem.Services.Interfaces
@using Korrekturmanagementsystem.Dtos
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authorization
@using Korrekturmanagementsystem.Components.Layout
@using System.Security.Claims
@attribute [AllowAnonymous]
@layout AuthLayout

<div class="modal modal-sheet position-static d-block p-4 py-md-5" tabindex="-1" role="dialog" id="modalSignin">
    <div class="modal-dialog">
        <div class="modal-content rounded-4 shadow">
            <div class="modal-header p-5 pb-4 border-bottom-0">
                <h1 class="fw-bold mb-0 fs-2">Mit Konto anmelden</h1>
            </div>
            <div class="modal-body p-5 pt-0">
                <EditForm Model="this" OnValidSubmit="HandleLoginAsync" FormName="LoginForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="loginModel.Username" class="form-control rounded-3" id="floatingInput" />
                        <label for="floatingInput">Benutzername</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="loginModel.Password" type="password" class="form-control rounded-3" id="floatingPassword" />
                        <label for="floatingPassword">Passwort</label>
                    </div>
                    <button class="w-100 mb-2 btn btn-lg rounded-3 btn-dark" type="submit">Anmelden</button>
                </EditForm>

                @if (_showError)
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        Benutzername oder Passwort ist ungültig.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool _showError;

    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private IUserService UserService { get; set; } = default!;
    [Inject] IPasswordService PasswordService { get; set; } = default!;
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; } = default!;

    [SupplyParameterFromForm]
    public LoginModel loginModel { get; set; } = new();

    private async Task HandleLoginAsync()
    {
        var user = await UserService.GetUserByUsernameAsync(loginModel.Username);

        if (user is null || !PasswordService.VerifyPassword(user.HashedPassword, loginModel.Password))
        {
            _showError = true;
            return;
        }

        var claims = new List<Claim>
        {
            new(ClaimTypes.Name, user.Username),
            new(ClaimTypes.NameIdentifier, user.Id.ToString()),
            new(ClaimTypes.Role, user.SystemRoleName)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        var httpContext = HttpContextAccessor.HttpContext;

        if (httpContext is not null)
        {
            await httpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                principal,
                new AuthenticationProperties
                {
                    IsPersistent = true,
                    ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(60)
                });
        }

        NavigationManager.NavigateTo("/");
    }
}
